Defining functions:

	Conditional expressions:
		if Boolean then E else F, type(E) = type(F)

	abs :: Int -> Int
	abs n = if n >= 0 then n else -n;

	signum :: Int -> Int
	signum n = 
		if n < 0 then -1 
		else if n == 0 then 0 
		else 1;

	Guarded equations:

		ans n | n >= 0 		= n
		      | otherwise   = -n

		 otherwise is an alies for False

		signum n 
			| n < 0	 = -1
			| n == 0    = 0
			| otherwise = 1

	Pattern matching:

		not :: Bool -> Bool
		not False = True
		not True = False

		(&&) :: Bool -> Bool -> Bool
		True && True   = True
		True && False  = False
		False && False = False
		False && False = False

		True && True = True
		_    && _    = False


		Patterns are interpreted top to bottom
		You cannot repeat variables

	List patterns:

		[1,2,3] == 1:(2:(3:[]))

		head :: [a] -> a
		head (x:_) = x

		tail :: [a] -> a
		tail (_:xs) = xs

	Lambda expressions

		\x -> x + x

		Prelude> (\x -> x + x) 5
		10

		They allow to express currying:

		add x y = x + y
		add = (\x -> (\y -> x + y))

		Prelude> (\x -> (\y -> x + y)) 8 9
		17

		The serve to explicit retur a function

		cons :: a -> (b -> a)
		const x = (\_ -> x)

		To avoid inventing names

		odds n = 
			map f [0 .. n - 1]
			where 
				f x = x * 2 + 1

		odds n = map (\x -> x*2 + 1) [0..n-1]

		Name something if you use it more than once, or it becomes clear

		An operator written between two arguments, can be converted
		into a curried function written before its two arguments by using parentheses

		7 + 8
		(+) 7 8

		So we can partially apply a function

		(1+) 2
		(+2) 1

		If # is a binary operator, we can write its sections
		(#)
		(x#)
		(#y)

		(1+) succesor
		(1/) multiplicative inverse
		(*2) doubling a function
		(/2) halving a function

