Haskell basics

Basic Haskell expressions:

ghci:
2+3*4 -> 14 // Multiplication has bigger precedence than addition
(2+3)*4 -> 20
sqrt(3^2 + 4^2) -> 5.0

Haskell comes with standard functions for numeric manipulation, and list processing

+ : Nat x Nat -> Nat
* : Number x Number -> Number
Where Real, Nat, Comples, Integer are subsets of Number

head [1,2,3,4,5] -> 1
tail [1,2,3,4,5] -> [2,3,4,5]
[1,2,3,4,5] !! 2 -> 3 // Indexing from 0
!! IS NOT O(1), it is O(n), so it's not used in practice widely
take 3 [1,2,3,4,5] -> [1,2,3]
drop 3 [1,2,3,4,5] -> [4,5]
take n (x:xs) ++ drop n (x:xs) -> (x:xs)
length [1,2,3,4,5] -> 5 IS NOT O(1), it is O(n)
sum [1,2,3,4,5] -> 15
product [1,2,3,4,5] -> 120
[1,2,3] ++ [4,5] -> [1,2,3,4,5]
reverse [1,2,3,4,5] -> [5,4,3,2,1]

Function application [f(a,b) + cd] vs [f a b + c*d], it binds stronger than any other operator so f a + b is f(a) + b rather than f(a + b)
[f(x)] vs [f x]
[f(x,y)] vs [f x y]
[f(g(x))] vs [f (g x)]
[f(x, g(y))] vs [f x (g y)]
[f(x)g(y)] vs [f x * g y]

Haskell scripts:

[filename].hs

test.hs
|------------------------------------|
|	double x = x + x                 |
|	quadruple x = double (double x)	 |
|------------------------------------|

average ns = sum ns `div`length ns, when you use x `f` y, you mean f x y, this turns it into an infix operator

Naming reqs:

Functions and parameters must begin with lowercase letters: myFun, fun1, arg_2, x'
Types start with uppercase (for definition)
Lists argements usually have an s suffix on their name: xs, ns, nss (list of lists)

Withespaces are significants, we avoid writing innecesary syntax

a = 10
b = 20
c = 30

NOT 

a = 30
	b = 90
c = 34


a = b + c
	where
		b = 1
		c = 2
d = a * 2

Really means

a = b + c
	where
		{b = 1;
		 c = 2}
d = a * 2

Some GHC commands are:

:load script_name
:reload
:edit script_name
:edit 
:type expr
:?
:quit
:q



