0. Parenthesise the following arithmetic expressions

	2 ^ 3 * 4
	2 * 3 + 4 * 5
	2 + 3 * 4 ^ 5

	(2 ^ 3) * 4
	(2 * 3) + (4 * 5)
	2 + (3 * (4 ^ 5))

1. The script below contains syntactic errors, correct these errors and then choose the right answer
	
	N = a 'div' length xs
		where
			a = 10
		   xs = [1,2,3,4,5]


	n = a `div`length xs
		where
			a = 10
			xs = [1, 2, 3, 4, 5]

2. Which expression is equivalent (has the same application answer) to last from a non-empty list?
	
	last :: [a] -> a

	a.	last xs = drop (length xs - 1) xs
	   	drop :: Int x [a] -> [a]
	   	length :: [a] -> Int
	   	drop (length xs - 1) xs :: [a] <> :type last xs

	b. 	last xs = head (drop (length xs - 1) xs)
		head :: [a] -> a
		drop :: Int x [a] -> [a]
		length :: [a] -> Int
		head (drop (length xs - 1) xs) :: a, YEAHHH

	c.	last xs = tail (reverse xs)
		reverse :: [a] -> [a]
		tail :: [a] -> [a]
		tail (reverse xs) :: [a] <> :type last xs

	d.	last xs = reverse (head xs)
		reverse :: [a] -> [a]
		head :: [a] -> a
		reverse (head xs) :: NOT TYPE

	e.	last xs = xs !! (length xs - 1)
		!! :: [a] x Int -> a
		length :: [a] -> Int
		xs !! (length xs - 1) :: a, YEAHHH

	f.	last xs = head (drop (length xs) xs)
		head :: [a] -> a
		drop :: Int x [a] -> [a]
		length :: [a] -> Int
		head (drop (length xs) xs) :: a, LIST IS EMPTY

	g. 	last xs = head (reverse xs)
		head :: [a] -> a
		reverse :: [a] -> [a]
		head (reverse xs) :: a, YEAHHH

	h.	last xs = reverse xs !! (length xs - 1)
		reverse :: [a] -> [a]
		!! :: [a] x Int -> a
		length :: [a] -> Int
		reverse xs !! (length xs - 1) :: a, BUT xs !! 0

3. The library function init, which removes the last element from a non-empty list, can be defined in temrs of the library functions in this chapters.

	init :: [a] -> [a]

	a.	init xs = tail (reverse xs) :: NOT THE SAME ANSWER
	b. 	init xs = reverse (head (reverse xs)) :: TYPE MISMATCH
	c.	init xs = reverse (tail xs) :: REVERSED
	d.	init xs = take (length xs) xs :: ORIGINAL LIST
	e.	init xs = reverse (tail (reverse xs)) :: SAME ANSWER
	f. 	init xs = take (length xs - 1) (tail xs) :: NOT SAME ANSWER
	g.	init xs = drop (length xs - 1) xs :: NOT SAME ANSWER

4. Give a possible calculation of double (double 2)

double (double 2) = double (x + x)[x => 2]
				  = double (2 + 2)
				  = double 4
				  = (x + x)[x => 4]
				  = (4 + 4)
				  = 8

double (double 2) = (x + x)[x => (double 2)]
				  = (double 2) + (double 2)
				  = (x + x)[x => 2] + (double 2)
				  = (2 + 2) + (double 2)
				  = 4 + (double 2)
				  = 4 + (x + x)[x => 2]
				  = 4 + (2 + 2)
				  = 4 + 4
				  = 8

				  	    
5. Show that sum [x] = x for_all (x in Numbers), sum is defines as follows

	sum [] = 0
	sum (x : xs) = x + sum xs

	sum [x] = sum (x : []) = x + sum [] = x + 0 = x

6. Define a function product that produces the product of a list of numbers, ans show using your definition that product [2, 3, 4] = 24

	product [] = 1
	product (x : xs) = x * product xs

7. How should the function qsort be modified so that is produces a reversed sorted version of a list.

	qsort [] = []
	qsort (x:xs) = qsort ys ++ [x] ++ qsort zs
		where
	      	ys = [a | a <- xs, a < x]
	      	zs = [b | b <- xs, b > x]

	qsort [] = []
	qsort (x:xs) = qsort larger ++ [x] ++ qsort smaller
		where smaller = [a | a <- xs, a <= x]
			  larger = [b | b <- xs, b > x]

8. What would be the effect of replacing <= by < in the definition of qsort?

	* Duplicate elements are removed from the list
	* The sorting function only work correctly on some inputs