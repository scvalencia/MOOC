0. What is the type of the following value: ['a', 'b', 'c']
	[Char]

1. What is the type of the following value: ('a', 'b', 'c')
	(Char, Char, Char)

2. What is the type of the following value: [(False , '0'), (True , '1')]
	[(Bool, Char)]

3. What is the type of the following value: ([False, True], ['0', '1'])
	([Bool], [Char])

4. What is the type of the following value: [tail, init, reverse]
	[[a] -> [a]]

5. What is the type of the following function:
	
	second xs = head (tail xs)

	:type head   = [a] -> a
	:type second = :type head
	__________________________
	:type second = [a] -> a

6. What is the type of the following function:

	swap (x, y)  = (y, x)

	:type (x, y) = (a, b)
	_____________________
	:type (y, x) = (b, a)

	:type swap = (a, b) -> (b, a)

7. What is the type of the following function: 

	pair x y = (x, y)

	a -> b -> (a, b)

8. What is the type of the following function: 

	double x = 2 * x

	Num a => a -> a

9. What is the type of the following function: 

	palindrome xs = reverse xs == xs

	:type (==)       = Eq a => a -> a -> Bool
	:type reverse    = [a] -> a
	_________________________________________
	:type xs         = [a]

	palindrome :: Eq a => [a] -> Bool

10. What is the type of the following function: 

	twice f x = f (f x)

	:type f = a -> a
	:type x = a
	________________________
	:Type twice = (a -> a) -> a -> a

11. Is it feasible for function types (in general) to be instances of the Eq class? 

	Infeasible in all cases. - incorrect Infeasible in general; only feasible for some functions.

12. Which of the following is not a valid list in Haskell:
	a. [[]]
	b. [(1,2), (3,4)]
	c. [[1,2], [3,4]]
	d. ['1', ['2', '3']]
	e. [(+), (-), (*)]

	d is not valid since its type is invalid, the types of every item is different.

13. Which of the following is an invalid list in Haskell:
	a. [[1],[2,3],[4]] 
	b. [1,[2,3],4] 
	c. [[1,2,3,4]]
	d. [[1,2],[3,4]]
	e. [[1],[2],[3],[4]]

	b for the same reason as before

14. The expression ["False", "True"] has type:
	
	[[Char]] = [String]

15. The expression ([False, True], False) has type:

	([Bool], Bool)

16. The expression ("1,2","3,4") has type:

	(String, String)

17. The expression [(1,True),(0,False)] has type:

	[(Int, Bool)]

18. What is the type of f xs = take 3 (reverse xs)

	:type take = Int -> [a] -> a
	:type f    = :type take 3 [a]
	_____________________________
	:type f    = [a] -> [a]

19. The type a -> b -> c -> d means:

	a -> (b -> (c -> d))

20. Which of the following expressions contains a type error:

	a. 1 : [2,3,4] 
	b. [] ++ [1,2,3,4]
	c. [[1,2]] ++ [[3,4]]
	d. [1,2,3] ++ 4
	e. 1 : 2 : 3 : 4 : []

	d since :type (++) = [a] -> [a] -> [a]