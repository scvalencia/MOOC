summary(results)
anova(results)
sum(anova(results)[c("Mean Sq")]) - 938
anova(results)
plot(simple)
abline(results)
abline(h=45)
abline(h=1200)
abline(results)
plot(simple)
abline(lm(time ~ Nile, data = simple))
abline(lm(time ~ Nile, data = simple), color="red")
abline(lm(time ~ Nile, data = simple), colour="red")
help(abline)
abline(lm(time ~ Nile, data = simple), col="red")
simple_ls <- read.csv('Downloads/Nile.csv', header=T)
simple <- simple_ls[c("time", "Nile")]
plot(simple)
results = lm(time ~ Nile, data = simple)
summary(results)
anova(results)
plot(simple[c("runs", "rbi")])
simple_ls <- read.csv('Downloads/Baseball.csv', header=T)
simple <- simple_ls[c("hits", "error86", "homer86", "atbat", "outs86", "walks86", "assist86", "hits86", "homeruns", "rbi86", "walks", "runs86", "atbat86", "runs", "rbi")]
plot(simple[c("runs", "rbi")])
results = lm(hits ~ error86 + homer86 + atbat + outs86 + walks86 + assist86 + hits86 + homeruns + rbi86 + walks + runs86 + atbat86 + runs + rbi, data = simple)
summary(results)
abline(h=1000, col="red")
abline(h=results, col="red")
abline(results, col="red")
simple_ls <- read.csv('Downloads/Nile.csv', header=T)
simple <- simple_ls[c("time", "Nile")]
plot(simple)
results = lm(time ~ Nile, data = simple)
summary(results)
anova(results)
sum(anova(results)[c("Mean Sq")]) - 938
abline(results, col="red")
abline(h=results, col="red")
abline(h=1000, col="red")
abline(lm(time ~ Nile, data = simple), col="red")
abline(lm(time ~ Nile, data = simple), col="red")
plot(simple)
abline(lm(time ~ Nile, data = simple), col="red")
d = read.table("/Desktop/data.txt",
sep="\t",
col.names=c("id", "name"),
fill=FALSE,
strip.white=TRUE)
d = read.table("~/Desktop/data.txt",
sep="\t",
col.names=c("id", "name"),
fill=FALSE,
strip.white=TRUE)
d = read.table("~/Desktop/data.txt",
sep="\t",
col.names=c("id", "name"),
fill=FALSE,
strip.white=TRUE)
d = read.table("~/Desktop/data.txt",
sep="\t",
col.names=c("id", "name"),
fill=FALSE,
strip.white=TRUE)
d = read.table("/Desktop/data.txt",
sep="\t")
d = read.table("~/Desktop/data.txt",
sep="\t")
d = read.table("~/Desktop/data.txt")
d
d["x1"]
d["V3"]
d = read.table("~/Desktop/data.txt", headers=TRUE)
d = read.table("~/Desktop/data.txt", header=TRUE)
D
d
d['Outcome']
class(d['Outcome'])
df[duplicated(d), ]
d[duplicated(d), ]
class(d[duplicated(d), ])
unique(d)
unique(d['Outcome'])
set <- unique(data[column])
set <- unique(data[column]);
}
gini(d, "x1")
gini <- function(data, column) {
set <- unique(data[column]);
return set
}
set <- unique(data);
gini(d, "x1")
sum <- function(x,y) {
x^2 + y^2
}
sum(3,4)
unique(df[,c(col)])
gini <- function(data, col) {
unique(df[,c(col)])
}
gini(d, "x1")
gini <- function(data, col) {
unique(data[,c(col)])
}
gini <- function(data, col) {
}
gini(d, "x1")
gini <- function(data, col) {
unique(data[,c(col)])
}
gini(d, "x1")
class(gini(d, "x1"))
gini <- function(data, col) {
set <- unique(data[, c(col)])
for (datum in levels(set))
print(datum)
}
gini(d, "x1")
data[data[, "x1"]='N', ]
subset(data, x1='N')
data[data$Var1>10, ]
data[data$Xx1>10, ]
data[data$x1>10, ]
data[data[, "x1"]>25, ]
data
d = read.table("~/Desktop/data.txt", header=TRUE)
d[d[, "x1"]>25, ]
d[d[, "x1"]='N', ]
d[d[, "x1"]=N, ]
d[d[, "x3"]<3, ]
d[d[, "x3"]<4, ]
subset(d, x1 == "N")
subset(d, 'x1' == "N")
gini <- function(data, col) {
set <- unique(data[, c(col)])
for (datum in levels(set))
print(datum)
}
gini(d, "x1")
gini(d, "oUTCOME")
gini(d, "Outcome")
gini(d, "x1")
gini(d, "x2")
gini(d, "x3")
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
for (datum in levels(set))
print(subset(d, x1 == datum))
}
gini_categorical(d, "x1")
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
for (datum in levels(set))
print(subset(d, col == datum))
}
gini_categorical(d, "x1")
gini_categorical(d, x1)
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
for (datum in levels(set))
print(subset(d, col == datum))
}
gini_categorical(d, "x1")
gini_categorical(d, x1)
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
for (datum in levels(set))
print(subset(d, col == datum))
}
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
for (datum in levels(set))
print(subset(d, x1 == datum))
}
gini_categorical(d, x1)
gini_categorical(d, "x1")
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
for (datum in levels(set))
print(subset(d, eval(parse(text=col)) == datum))
}
gini_categorical(d, "x1")
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
print(class(set))
categories <- 0
for (datum in levels(set))
print(subset(d, eval(parse(text=col)) == datum))
}
gini_categorical(d, "x1")
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
categories <- length(set)
print(categories)
for (datum in levels(set))
print(subset(d, eval(parse(text=col)) == datum))
}
gini_categorical(d, "x1")
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
categories <- length(set)
for (datum in levels(set)) {
print(class(subset(d, eval(parse(text=col)) == datum)))
}
}
gini_categorical(d, "x1")
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
categories <- length(set)
for (datum in levels(set)) {
print(subset(d, eval(parse(text=col)) == datum))
}
}
gini_categorical(d, "x1")
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
categories <- length(set)
ll <- list()
for (element in levels(set)) {
c(ll, eval(parse(text=element))=0)
}
for (datum in levels(set)) {
ll <- list()
for (element in set)
print(subset(d, eval(parse(text=col)) == datum))
}
}
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
categories <- length(set)
ll <- list()
for (element in levels(set))
c(ll, eval(parse(text=element))=0)
for (datum in levels(set)) {
ll <- list()
print(subset(d, eval(parse(text=col)) == datum))
}
}
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
categories <- length(set)
ll <- list()
for (element in levels(set))
c(ll, eval(parse(text=element))=0)
print(ll)
for (datum in levels(set)) {
print(subset(d, eval(parse(text=col)) == datum))
}
}
gini_categorical(d, "x1")
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
categories <- length(set)
ll <- list()
for (element in levels(set))
c(ll, eval(parse(text=element))=0)
print(ll)
#for (datum in levels(set)) {
# print(subset(d, eval(parse(text=col)) == datum))
#  }
}
gini_categorical(d, "x1")
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
categories <- length(set)
ll <- list()
for (element in levels(set))
c(ll, eval(parse(text=element))=0)
print(ll)
#for (datum in levels(set)) {
# print(subset(d, eval(parse(text=col)) == datum))
#  }
}
gini_categorical(d, "x1")
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
categories <- length(set)
ll <- list()
for (element in levels(set))
c(ll, eval(parse(text=element))=0)
print(ll)
#for (datum in levels(set)) {
# print(subset(d, eval(parse(text=col)) == datum))
#  }
}
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
categories <- length(set)
ll <- list()
for (element in levels(set))
c(ll, eval(parse(text=element))=0)
print(ll)
}
gini_categorical <- function(data, col) {
set <- unique(data[, c(col)])
categories <- length(set)
ll <- list()
for (element in levels(set)) {
c(ll, eval(parse(text=element))=0)
}
print(ll)
}
View(sum)
gini <- function(x, unbiased = TRUE, na.rm = FALSE){
if (!is.numeric(x)){
warning("'x' is not numeric; returning NA")
return(NA)
}
if (!na.rm && any(na.ind <- is.na(x)))
stop("'x' contain NAs")
if (na.rm)
x <- x[!na.ind]
n <- length(x)
mu <- mean(x)
N <- if (unbiased) n * (n - 1) else n * n
ox <- x[order(x)]
dsum <- drop(crossprod(2 * 1:n - n - 1,  ox))
dsum / (mu * N)
}
gini(c(100,0,0,0))
gini(c('A','B', 'A', 'A'))
simple_ls <- read.csv('Downloads/Baseball.csv', header=T)
simple <- simple_ls[c("hits", "error86", "homer86", "atbat", "outs86", "walks86", "assist86", "hits86", "homeruns", "rbi86", "walks", "runs86", "atbat86", "runs", "rbi")]
plot(simple[c("runs", "rbi")])
results = lm(hits ~ error86 + homer86 + atbat + outs86 + walks86 + assist86 + hits86 + homeruns + rbi86 + walks + runs86 + atbat86 + runs + rbi, data = simple)
summary(results)
simple_ls <- read.csv('Downloads/data.csv', header=T)
simple_ls
simple <- simple_ls[c("y", "x1", "x2", "x3", "x4", "x5")]
simple
plot(simple)
plot(simple[c("y", "x1")])
plot(simple[c("y", "x1")])
plot(simple[c("y", "x2")])
plot(simple[c("y", "x3")])
plot(simple[c("y", "x4")])
plot(simple[c("y", "x5")])
attach(mtcars)
par(mfrow=c(2,2))
plot(simple[c("y", "x1")])
plot(simple[c("y", "x2")])
plot(simple[c("y", "x3")])
plot(simple[c("y", "x4")])
simple_ls <- read.csv('Downloads/data.csv', header=T)
simple <- simple_ls[c("y", "x1", "x2", "x3", "x4", "x5")]
attach(mtcars)
par(mfrow=c(3,3))
plot(simple[c("y", "x1")])
plot(simple[c("y", "x2")])
plot(simple[c("y", "x3")])
plot(simple[c("y", "x4")])
plot(simple[c("y", "x5")])
simple_ls <- read.csv('Downloads/data.csv', header=T)
simple <- simple_ls[c("y", "x1", "x2", "x3", "x4", "x5")]
attach(mtcars)
par(mfrow=c(2,3))
plot(simple[c("y", "x1")])
plot(simple[c("y", "x2")])
plot(simple[c("y", "x3")])
plot(simple[c("y", "x4")])
plot(simple[c("y", "x5")])
plot(simple[c("x1", "y")])
simple_ls <- read.csv('Downloads/data.csv', header=T)
simple <- simple_ls[c("y", "x1", "x2", "x3", "x4", "x5")]
attach(mtcars)
par(mfrow=c(2,3))
plot(simple[c("x1", "y")])
plot(simple[c("x2", "y")])
plot(simple[c("x3", "y")])
plot(simple[c("x4", "y")])
plot(simple[c("x5", "y")])
results = lm(y ~ x1 + x2 + x3 + x4 + x5, data = simple)
summary(results)
anova(results)
plot(results)
print(xtable(summary))
install.packages("xtable")
library(xtable)
install.packages("xtable")
print(xtable(summary))
print(xtable(summary(results)))
print(xtable(anova(results)))
results
simple_ls <- read.csv('Downloads/data.csv', header=T)
simple <- simple_ls[c("y", "x1", "x2", "x3", "x4", "x5")]
attach(mtcars)
par(mfrow=c(2,3))
plot(simple[c("x1", "y")])
plot(simple[c("x2", "y")])
plot(simple[c("x3", "y")])
plot(simple[c("x4", "y")])
plot(simple[c("x5", "y")])
results = lm(y ~ x1 + x2 + x3 + x4 + x5, data = simple)
summary(results)
anova(results)
hist(results.out$residuals, main="Histogram of Residuals", xlab = "bf residuals")
hist(results$residuals, main="Histogram of Residuals", xlab = "bf residuals")
summary(results)
hist(results$residuals, main="Histogram of Residuals", xlab = "bf residuals")
hist(results$residuals, main="Histogram of Residuals", xlab = "bf residuals")
simple_ls <- read.csv('Downloads/data.csv', header=T)
simple <- simple_ls[c("y", "x1", "x2", "x3", "x4", "x5")]
results = lm(y ~ x1 + x2 + x3 + x4 + x5, data = simple)
plot(results)
hist(results$residuals, main="Histogram of Residuals", xlab = "bf residuals")
clear;
clean
install.packages("swirl")
library(swirl)
swirl()
bye()
swirl()
bye()
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
source('~/Documents/MOOC/MOOC/Udacity/Data science/DataAnalysisWithR/Lesson2/materials/demystifying.R', echo=TRUE)
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
udacious$=
udacious$0
udacious.0
udacious(0)
udacious
udacious[1]
udacious[0]
udacious[4]
udacious[3]
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
YOUR_NAME <- "Sebastian Valencia"
udacious <- c("Chris Saden", "Lauren Castellano",
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", YOUR_NAME)
YOUR_NAME <- "Sebastian Valencia"
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", YOUR_NAME)
plot(udacious)
min(udacious)
max(udacious)
udacious[-1]
udacious[9]
mystery = nchar(udacious)
mystery
mystery == 11
comp_scientists <- c("Barbara Liskov", "John McCarthy", "Marvin Misnky", "Brian Kernighan",
"Ada Lovelace", "Andrew Ng", "Niklaus Wirth", "Alan Kay", "Robert Tarjan",
"Guido van Rossun")
comp_scientists[1]
comp_scientists[4]
comp_scientists
mathematicians
mathematicians <- c("Henri Poincare", "David Hilbert", "Kurt Goedel", "Alan Turing",
"Bertrand Russell", "Walter Rudin", "Sophus Lie", "Norbert Wiener",
"Claude Shannon")
mathematicians
scientists <- c(comp_scientists, mathematicians)
scientists
name_lengths <- nchar(scientists)
name_lengths
for(i <- 1:10) {
print i
}
i;
for(i <- 1:10) {
i;
}
prime_length <- name_lengths == 13
prime_length
prime_length <- name_lengths == 13 or name_lengths == 11
prime_length
prime_length <- name_lengths == 13 || name_lengths == 11
prime_length
prime_length <- name_lengths == 13
prime_length
# Here we get a logical (or boolean) vector that tells us
udacious[mystery == 11]
scientists[name_lengths == 13]
data(mtcars)
names(mtcars)
?mtcars
mtcars
str(mtcars)
dim(mtcars)
?row.names
row.names(mtcars)
row.names(mtcars) <- c(1:32)
row.names(mtcars)
mtcars
mtcars
data(mtcars)
head(mtcars, 10)
tail(mtcars, 3)
tail(mtcars, 10)
mtcars$mpg
mean(mtcars$mpg)
getcwd()
getwd()
setwd("~/Users/scvalencia606/Docuemnts")
setwd("/Users/scvalencia606/Documents/MOOC/MOOC/Udacity/Data science/DataAnalysisWithR/Lesson2/data")
getwd()
